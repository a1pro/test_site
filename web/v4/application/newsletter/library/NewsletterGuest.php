<?php
/**
 * Class represents records from table newsletter_guest
 * {autogenerated}
 * @property int $guest_id 
 * @property string $name_f 
 * @property string $name_l 
 * @property string $email 
 * @see Am_Table
 */
class NewsletterGuest extends Am_Record 
{
    function getLists()
    {
        return $this->_db->selectCol("SELECT list_id 
            FROM ?_newsletter_guest_subscription 
            WHERE guest_id=?d", $this->pk());
    }
    function setLists(array $ids)
    {
        $this->_db->query("DELETE 
            FROM ?_newsletter_guest_subscription
            WHERE guest_id=?d { AND list_id NOT IN (?a) }", $this->pk(),
                $ids ? $ids : DBSIMPLE_SKIP);
        if ($ids)
        {
            $sql = "INSERT IGNORE INTO ?_newsletter_guest_subscription (guest_id, list_id) VALUES \n";
            foreach ($ids as $list_id)
            {
                $sql .= sprintf("(%d,%d),\n", $this->pk(), $list_id);
            }
            $this->_db->query(trim($sql, ",\n"));
        }
    }
}

class NewsletterGuestTable extends Am_Table 
{
    protected $_key = 'guest_id';
    protected $_table = '?_newsletter_guest';
    
    /**
     * Create subscribed guest record
     * Does not check lists availability!
     * @param type $email
     * @param type $name_f
     * @param type $name_l
     * @param array $ids
     * @return User|NewsletterGuest
     */
    public function create($email, $name_f, $name_l, array $ids)
    {
        // check if user exists with such e-mail, then subscribe him
        $user = $this->getDi()->userTable->findFirstByEmail($email);
        if ($user)
        {
            foreach ($ids as $list_id)
                try {
                    $this->getDi()->newsletterUserSubscriptionTable->add($user->pk(), 
                        $list_id, NewsletterUserSubscription::TYPE_USER);
                } catch (Am_Exception_Db_NotUnique $e) {} 
            return $user;
        }
        // check if guest exists with such e-mail then subscribe him
        $guest = $this->getDi()->newsletterGuestTable->findFirstByEmail($email);
        if (!$guest)
        {
            $guest = $this->getDi()->newsletterGuestRecord;
            $guest->email = $email;
            $guest->name_f = $name_f;
            $guest->name_l = $name_l;
            $guest->insert();
        }
        foreach ($ids as $list_id)
            try {
                $this->getDi()->newsletterGuestSubscriptionTable->add($guest->pk(), 
                    $list_id);
            } catch (Am_Exception_Db_NotUnique $e) {} 
        return $guest;
    }
}
